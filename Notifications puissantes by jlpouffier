blueprint:
  name: Notifications puissantes by jlpouffier
  description: >
    Envoyez des notifications puissantes qui se désactivent d'elles-mêmes aux personnes du foyer en fonction de l'endroit où elles se trouvent.
    Ce modèle doit être utilisé à chaque fois que vous souhaitez configurer une nouvelle notification.
    Il créera un script que vous pourrez appeler à chaque fois que vous voudrez l'envoyer.
  domain: script
  author: JLo
  input:
    target:
      name: Notification target
      icon: mdi:bullseye-arrow
      description: Contrôlez qui recevra la notification.
      input:
        persons:
          name: Parmi ces personnes ...
          description: Laissez vide si vous ne souhaitez pas filtrer la liste initiale.
          default: []
          selector:
            entity:
              multiple: true
              domain: person
        target:
          name: ... Envoyer la notification à
          description: Cible de la notification.
          default: send_to_all
          selector:
            select:
              options:
                - label: Tout le monde
                  value: send_to_all
                - label: Tout le monde à l'intérieur d'une (de) zone(s)
                  value: send_to_persons_in_zones
                - label: Tout le monde en dehors d'une (de) zone(s)
                  value: send_to_persons_not_in_zones
                - label: Le plus proche d'un objet
                  value: send_to_nearest
        zones:
          name: Zones (Facultatif)
          description: Utilisé uniquement si la cible est basée sur des zones.
          default: []
          selector:
            entity:
              multiple: true
              domain: zone
        thing:
          name: Plus proche de... (Facultatif)
          description: Utilisé uniquement si la cible est "Le plus proche de...".
          default: ""
          selector:
            entity:
              domain:
                - person
                - device_tracker
                - zone
    content:
      name: Contenu de la notification par défaut
      description: Définir le contenu de la notification. Peut être surchargé à l'exécution.
      icon: mdi:message
      input:
        default_title:
          name: Titre par défaut
          description: Titre par défaut de la notification.
          default: ""
          selector:
            text:
        default_message:
          name: Message par défaut
          description: Message par défaut de la notification.
          default: ""
          selector:
            text:
        default_importance:
          name: Importance par défaut
          description: Marquer la notification comme importante.
          default: false
          selector:
            boolean:
    button:
      name: Bouton de notification
      description: Inclure un bouton dans la notification et ses actions.
      icon: mdi:button-pointer
      collapsed: true
      input:
        button_title:
          name: Titre du bouton
          description: Texte affiché sur le bouton.
          default: ""
          selector:
            text:
        button_action:
          name: Action du bouton
          description: Actions exécutées lors de l'appui sur le bouton.
          default: []
          selector:
            action:
    discard:
      name: Rejet de la notification
      description: Conditions pour rejeter automatiquement la notification.
      icon: mdi:delete
      collapsed: true
      input:
        discard_when:
          name: Rejeter lorsque ...
          description: Déclencheurs pour rejeter la notification.
          default: []
          selector:
            trigger:
    advanced_section:
      name: Données avancées de notification
      icon: mdi:cog
      collapsed: true
      input:
        notification_data_advanced:
          name: Données avancées
          description: Ajouter des données personnalisées pour la notification.
          default: {}
          selector:
            object:

variables:
  # Mapping entre entité person et service de notification
  person_service_mapping:
    person.jenova70:
      service: notify.mobile_app_jean_loics_iphone

mode: restart
max_exceeded: silent

fields:
  user_title:
    name: Titre
    description: Titre de la notification (override).
    required: false
    selector:
      text:
  user_message:
    name: Message
    description: Message de la notification (override).
    required: false
    selector:
      text:
  user_importance:
    name: Importance
    description: Importance de la notification (override).
    required: false
    selector:
      boolean:
  user_tag:
    name: Identifiant unique
    description: Identifiant unique de la notification (override).
    required: false
    selector:
      text:

sequence:
  - variables:
      target: !input target.target
      persons: !input target.persons
      zones: !input target.zones
      thing: !input target.thing

      default_title: !input content.default_title
      default_message: !input content.default_message
      default_importance: !input content.default_importance

      button_title: !input button.button_title
      button_action: !input button.button_action
      discard_when: !input discard.discard_when
      notification_data_advanced: !input advanced_section.notification_data_advanced

      # Tag par défaut basé sur l'entity_id du script
      default_tag: "{{ this.entity_id | md5 }}"

      # Override fields avec gestion du cas non défini
      title: >
        {% if user_title is defined and user_title != "" %}
          {{ user_title }}
        {% else %}
          {{ default_title }}
        {% endif %}
      message: >
        {% if user_message is defined and user_message != "" %}
          {{ user_message }}
        {% else %}
          {{ default_message }}
        {% endif %}
      importance: >
        {% if user_importance is defined %}
          {{ user_importance }}
        {% else %}
          {{ default_importance }}
        {% endif %}
      tag: >
        {% if user_tag is defined and user_tag != "" %}
          {{ user_tag }}
        {% else %}
          {{ default_tag }}
        {% endif %}

      # Partie données notification
      notification_data_tag:
        tag: "{{ tag }}"
      notification_data_importance: >
        {% if importance | bool %}
          {
            "push": {
              "interruption-level": "critical"
            }
          }
        {% else %}
          {}
        {% endif %}
      notification_data_callback: >
        {% if button_title | length > 0 %}
          {
            "actions": [
              {
                "action": "{{ tag }}",
                "title": "{{ button_title }}",
                "icon": "sfsymbols:checkmark.circle"
              }
            ]
          }
        {% else %}
          {}
        {% endif %}
      notification_data: >
        {{
          dict(
            dict(
              dict(notification_data_tag, **(notification_data_importance | from_json)),
              **(notification_data_callback | from_json)
            ),
            **notification_data_advanced
          )
        }}

      # Liste des personnes initiale
      initial_iterable_list: >
        {% if persons | length > 0 %}
          {{ persons }}
        {% else %}
          {{ expand(states.person) | map(attribute='entity_id') | list }}
        {% endif %}

      # Liste des personnes selon la cible
      iterable_persons: >
        {% if target == 'send_to_all' %}
          {{ initial_iterable_list }}
        {% elif target == 'send_to_persons_in_zones' %}
          [
            {% for person in initial_iterable_list %}
              {% set inside_zone = false %}
              {% for zone in zones %}
                {% if (distance(person, zone) | float(0)) * 1000 <= (state_attr(zone, 'radius') | default(0)) %}
                  {% set inside_zone = true %}
                {% endif %}
              {% endfor %}
              {% if inside_zone %}
                "{{ person }}",
              {% endif %}
            {% endfor %}
          ]
        {% elif target == 'send_to_persons_not_in_zones' %}
          [
            {% for person in initial_iterable_list %}
              {% set inside_zone = false %}
              {% for zone in zones %}
                {% if (distance(person, zone) | float(0)) * 1000 <= (state_attr(zone, 'radius') | default(0)) %}
                  {% set inside_zone = true %}
                {% endif %}
              {% endfor %}
              {% if not inside_zone %}
                "{{ person }}",
              {% endif %}
            {% endfor %}
          ]
        {% elif target == 'send_to_nearest' %}
          {% set min_distance = namespace(value=21000000) %}
          {% set proximity_band = (state_attr('zone.home', 'radius') | default(300)) * 3 %}
          {% for person in initial_iterable_list %}
            {% set person_distance = (distance(person, thing) | default(0)) * 1000 %}
            {% if person_distance <= min_distance.value %}
              {% set min_distance.value = person_distance %}
            {% endif %}
          {% endfor %}
          [
            {% for person in initial_iterable_list %}
              {% set person_distance = (distance(person, thing) | default(0)) * 1000 %}
              {% if person_distance <= min_distance.value + proximity_band %}
                "{{ person }}",
              {% endif %}
            {% endfor %}
          ]
        {% else %}
          []
        {% endif %}

  - repeat:
      sequence:
        - if:
            - condition: template
              value_template: >
                {% set has_master_switch = 'input_boolean.funny_notifications' in states %}
                {% set has_agent = 'conversation.funny_notifications_conversation_agent' in states %}
                {% set master_switch_on = states('input_boolean.funny_notifications') == 'on' %}
                {{ has_master_switch and has_agent and master_switch_on }}
          then:
            - action: conversation.process
              data:
                agent_id: conversation.funny_notifications_conversation_agent
                text: >
                  {"command":"send_notification","parameters":{"target":{{ iterable_persons }}, "title":"{{ title }}", "message":"{{ message }}", "tag":"{{ tag }}" }}
          else:
            - choose:
                - conditions:
                    - condition: template
                      value_template: "{{ iterable_persons | length > 0 }}"
                  sequence:
                    - repeat:
                        count: "{{ iterable_persons | length }}"
                        sequence:
                          - variables:
                              person: "{{ iterable_persons[repeat.index - 1] }}"
                              service: "{{ person_service_mapping.get(person, '') }}"
                          - if:
                              - condition: template
                                value_template: "{{ service != '' }}"
                            then:
                              - service: "{{ service }}"
                                data:
                                  title: "{{ title }}"
                                  message: "{{ message }}"
                                  data: "{{ notification_data }}"
                            else:
                              - log:
                                  level: warning
                                  message: >
                                    Aucun service de notification configuré pour la personne {{ person }}.
                - default:
                    - log:
                        level: warning
                        message: "Aucun destinataire trouvé pour la notification."

